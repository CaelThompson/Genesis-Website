---
import { articles as originalArticles } from "./Article1Storage";
import { interviews as originalInterviews } from "./Interview1Storage";
import Container from "../../global/NewsContainer.astro";

// Map articles to include 'url' and 'type' properties
const articles = originalArticles.map(article => ({
  ...article,
  url: `/article1/${article.slug}`, // Derive 'url' from 'slug'
  type: article.type || "default" // Add a default 'type' if missing
}));

// Function to get a unique random article
let displayedArticles = new Set();
function getUniqueRandomArticle() {
  if (displayedArticles.size === articles.length) {
    // Reset the set if all articles have been displayed
    displayedArticles.clear();
  }

  let randomArticle: { title: string; description: string; image: string; url: string; date: string; type: string };
  do {
    randomArticle = articles[Math.floor(Math.random() * articles.length)];
  } while (displayedArticles.has(randomArticle));

  displayedArticles.add(randomArticle);
  return randomArticle;
}

// Map interviews to include 'url' and 'type' properties
const interviews = originalInterviews.map(interview => ({
  ...interview,
  url: `/interview1/${interview.slug}`, // Derive 'url' from 'slug'
  type: interview.type || "default" // Add a default 'type' if missing
}));

// Function to get a unique random interview
let displayedInterviews = new Set();
function getUniqueRandomInterview() {
  if (displayedInterviews.size === interviews.length) {
    // Reset the set if all interviews have been displayed
    displayedInterviews.clear();
  }

  let randomInterview: { title: string; description: string; image: string; url: string; date: string; type: string };
  do {
    randomInterview = interviews[Math.floor(Math.random() * interviews.length)];
  } while (displayedInterviews.has(randomInterview));

  displayedInterviews.add(randomInterview);
  return randomInterview;
}

// Get a unique random article
const { title, description, image, url, date } = getUniqueRandomArticle();


---
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vanguard Journal</title>
  </head>
<style>
  .article-box {
    background-color: #f4f4f4;
    margin: 20px;
    margin-left: 80px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    height: auto;
    position: relative; /* Added for positioning the date */
  }

  .article-image {
    flex: 2;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    background-size: cover;
    background-position: center;
    padding-top: 30%;
  }

  .article-text {
    flex: 1;
    padding: 20px;
    display: flex;
    flex-direction: column;
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
  }

  .article-box:hover .article-text {
    background-color: #e0e0e0;
    border-radius: 8px;
    border-top-left-radius: 0px;
    border-top-right-radius: 0px;

  }

  .article-date {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: rgba(255, 255, 255, 0.8);
    padding: 5px 10px;
    border-radius: 4px;
    font-size: 14px;
    font-weight: bold;
  }

  .interview-box{
    background-color: #494951;
    margin: 20px;
    margin-right: 60px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    height: auto;
    position: relative; /* Added for positioning the date */
  }

  .interview-text{
    flex: 1;
    padding: 20px;
    display: flex;
    flex-direction: column;
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
    color: white;
  }

  
  .interview-date{
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: rgba(255, 255, 255, 0.926);
    padding: 5px 10px;
    border-radius: 4px;
    font-size: 14px;
    font-weight: bold;
  }

  .interview-box:hover .interview-text {
    background-color: #36363c;
    border-radius: 8px;
    border-top-left-radius: 0px;
    border-top-right-radius: 0px;
  }
</style>
<Container>

<!-- Article Box -->
<div class="flex">
  <div class="flex flex-col w-2/3">
    <h1 class="text-3xl font-bold text-gray-900 pl-20">Trending Articles</h1>
    {Array.from({ length: 3 }).map(() => {
      const { title, description, image, url, date } = getUniqueRandomArticle();
      return (
        <a href={url} class="mb-6">
          <div class="article-box">
            <div
              class="article-image group"
              style={`background-image: url('${image}');`}
            ></div>
            <time datetime={date} class="article-date">
              {new Date(date).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}
            </time>
            <div class="article-text">
              <h2 class="text-[20px]">{title}</h2>
              <p>{description}</p>
            </div>
          </div>
        </a>
      );
    })}
  </div>

  <!-- Interview Box -->
  <div class="flex flex-col w-1/3">
    <h1 class="text-3xl font-bold text-gray-900 pl-4">Trending Interviews</h1>
    {Array.from({ length: 3 }).map(() => {
      const { title, description, image, url, date } = getUniqueRandomInterview();
      return (
        <a href={url} class="mb-6">
          <div class="interview-box">
            <div
              class="article-image group"
              style={`background-image: url('${image}');`}
            ></div>
            <time datetime={date} class="article-date">
              {new Date(date).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}
            </time>
            <div class="interview-text">
              <h2 class="text-[20px]">{title}</h2>
              <p>{description}</p>
            </div>
          </div>
        </a>
      );
    })}
  </div>
</div>
<div style="margin-bottom: 20px;"></div> 
</Container>